PATRON DECORATOR
----------------
-> Provee un mecanismo para colocar un nuevo comportamiento y/o estado a un objeto de forma dinamica
-> El objeto no sabe que esta siendo decorado
-> Tiene una instancia de la clase original y tambien desciende de ella 
-> No necesitamos una superclase con todas las caracteristicas
-> Cada decoracion es independiente de las demas
-> Podemos colocarlas segun las necesitamos
-> No depende de la herencia para adicionar nuevos comportamientos
-> Alguno recomiendan usar clases abstractas, en lo personal prefiero el uso de interfaces

ELEMENTOS PRINCIPALES
---------------------
-> Componente: La clase original que esta siendo decorada y a la que se le adicionan o mejoran 
   comportamientos  
-> IComponent: La interfaz que identifica a los objetos que pueden se decorados 
-> Operacion: La operacion en Componente que puede ser remplazada
-> Decorador: La clase que implementa a IComponent y adiciona el estado o comportamiento

CUANDO USARLO
-------------
-> Tenemos una clase a la que se necesita adicionar comportamientos, pero no es posible/ recomendable 
   hacer referencia
-> Se desea adicionar comportamientos o estados de forma dinamica
-> Hace cambios a un objeto de la clase sin modificar a otros de la misma clase
-> Deseamos evitar clases hijas, pues acabarias con muchas clases

DESVENTAJAS
------------
-> El decorar y el objeto al que envuelve no son del mismo tipo, hay que tener cuidado con eso
-> Si bien la cantidad de clases disminuyen, podemos acabar con muchos "objetos pequeños" en memoria
-> Si se usa indiscriminadamente, puede complicar el mantenimiento al tener muchos objetos con 
muchas decoraciones y perder la pista de que objeto tiene que caracteristicas.